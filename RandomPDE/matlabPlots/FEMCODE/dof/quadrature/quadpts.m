function [lambda,weight] = quadpts(dim,order)
%% QUADPTS gives simplicial quadrature points for given dimension and order
%
% [lambda,weight] = quadpts(dim, order) returns quadrature points with 
% given and cimension in the barycentric coordinates.
%
% The output lambda is a matrix of size nQ by dim+1, where nQ is the number 
% of quadrature points. lambda(i,:) are three barycentric coordinate of the
% i-th quadrature point. 
%
% The weight of p-th quadrature point is given by weight(p). 
%
% Copyright (C) Long Chen. See COPYRIGHT.txt for details. 


% ORDER 0, ORDER 1 
% 1 quadrature point (barycenter)
if (order == 0) || (order == 1) 
	lambda = repmat(1/(dim+1),[1,dim+1]);
	weight = 1;

% ORDER 2 - dim + 1 quadrature points 
elseif (order == 2) || ((order == 3) && (dim == 1))
	alpha = (1 - 1/sqrt(dim+2)) / (dim+1);
	beta  = 1 - dim*alpha;
	lambda = repmat(alpha,[dim+1,dim+1]);
	lambda(eye(dim+1)==1) = beta;
	weight = repmat(1/(dim+1),[1,dim+1]);
% ORDER 3 - dim + 2 quadature points (one with negative weight)
elseif (order == 3) && (dim > 1)
	alpha = 1/(dim+3);
	beta  = 3/(dim+3);
	lambda = repmat(alpha,[dim+1,dim+1]);
	lambda(eye(dim+1)==1) = beta;
	lambda = [lambda; repmat(1/(dim+1),[1,dim+1])];
	gamma = (dim+3)^2/(dim+1)/(dim+2)/4;
	weight = [repmat(gamma,[1,dim+1]), 1-(dim+1)*gamma];

elseif (dim == 0)
	lambda = 1;
	weight = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 1D - GAUSS QUADRATURE NODES
% * Pavel Holoborodko
% http://www.holoborodko.com/pavel/numerical-methods/numerical-integration/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elseif (dim == 1)
	if (order == 4) || (order == 5)
        A = [0 	0.8888888888888888888888889
            0.7745966692414833770358531 	0.5555555555555555555555556
            -0.7745966692414833770358531 	0.5555555555555555555555556];
        
	elseif (order == 6) || (order == 7)
        A = [0.3399810435848562648026658 	0.6521451548625461426269361
            0.8611363115940525752239465 	0.3478548451374538573730639
            -0.3399810435848562648026658 	0.6521451548625461426269361
            -0.8611363115940525752239465 	0.3478548451374538573730639];
        
    elseif (order == 8) || (order == 9)
        A = [0 	                            0.5688888888888888888888889
            0.5384693101056830910363144 	0.4786286704993664680412915
            0.9061798459386639927976269 	0.2369268850561890875142640
            -0.5384693101056830910363144 	0.4786286704993664680412915
            -0.9061798459386639927976269 	0.2369268850561890875142640];
        
    elseif (order == 10) || (order == 11)
        A = [0.2386191860831969086305017 	0.4679139345726910473898703
            0.6612093864662645136613996 	0.3607615730481386075698335
            0.9324695142031520278123016 	0.1713244923791703450402961
            -0.2386191860831969086305017 	0.4679139345726910473898703
            -0.6612093864662645136613996 	0.3607615730481386075698335
            -0.9324695142031520278123016 	0.1713244923791703450402961];
        
    elseif (order == 12) || (order == 13)
        A = [0 	                            0.4179591836734693877551020
            0.4058451513773971669066064 	0.3818300505051189449503698
            0.7415311855993944398638648 	0.2797053914892766679014678
            0.9491079123427585245261897 	0.1294849661688696932706114
            -0.4058451513773971669066064 	0.3818300505051189449503698
            -0.7415311855993944398638648 	0.2797053914892766679014678
            -0.9491079123427585245261897 	0.1294849661688696932706114];
        
    elseif (order == 14) || (order == 15)
        A = [0.1834346424956498049394761 	0.3626837833783619829651504
            0.5255324099163289858177390 	0.3137066458778872873379622
            0.7966664774136267395915539 	0.2223810344533744705443560
            0.9602898564975362316835609 	0.1012285362903762591525314
            -0.1834346424956498049394761 	0.3626837833783619829651504
            -0.5255324099163289858177390 	0.3137066458778872873379622
            -0.7966664774136267395915539 	0.2223810344533744705443560
            -0.9602898564975362316835609 	0.1012285362903762591525314];
        
    elseif (order == 16) || (order == 17)
        A = [0 	                            0.3302393550012597631645251
            0.3242534234038089290385380 	0.3123470770400028400686304
            0.6133714327005903973087020 	0.2606106964029354623187429
            0.8360311073266357942994298 	0.1806481606948574040584720
            0.9681602395076260898355762 	0.0812743883615744119718922
            -0.3242534234038089290385380 	0.3123470770400028400686304
            -0.6133714327005903973087020 	0.2606106964029354623187429
            -0.8360311073266357942994298 	0.1806481606948574040584720
            -0.9681602395076260898355762 	0.0812743883615744119718922];
        
    elseif (order == 18) || (order == 19)
        A = [0.1488743389816312108848260 	0.2955242247147528701738930
            0.4333953941292471907992659 	0.2692667193099963550912269
            0.6794095682990244062343274 	0.2190863625159820439955349
            0.8650633666889845107320967 	0.1494513491505805931457763
            0.9739065285171717200779640 	0.0666713443086881375935688
            -0.1488743389816312108848260 	0.2955242247147528701738930
            -0.4333953941292471907992659 	0.2692667193099963550912269
            -0.6794095682990244062343274 	0.2190863625159820439955349
            -0.8650633666889845107320967 	0.1494513491505805931457763
            -0.9739065285171717200779640 	0.0666713443086881375935688];
	else
		error('Gaussian quadrature in 1D up to order 19 only.');
	end
	lambda1 = (A(:,1)+1)/2;
	lambda2 = 1 - lambda1;
	lambda = [lambda1, lambda2];
	weight = A(:,2)/2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 2D
% * David Dunavant. High degree efficient symmetrical Gaussian
%    quadrature rules for the triangle. International journal for numerical
%    methods in engineering. 21(6):1129--1148, 1985. 
% * John Burkardt. DUNAVANT Quadrature Rules for the Triangle.
%    http://people.sc.fsu.edu/~burkardt/m_src/dunavant/dunavant.html
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elseif (dim == 2)
	switch order
		case 4 % Order 4, nQuad 6
			lambda = [0.108103018168070, 0.445948490915965, 0.445948490915965; ...
				0.445948490915965, 0.108103018168070, 0.445948490915965; ...
				0.445948490915965, 0.445948490915965, 0.108103018168070; ...
				0.816847572980459, 0.091576213509771, 0.091576213509771; ...
				0.091576213509771, 0.816847572980459, 0.091576213509771; ...
				0.091576213509771, 0.091576213509771, 0.816847572980459];
			weight = [0.223381589678011, 0.223381589678011, 0.223381589678011, ...
				0.109951743655322, 0.109951743655322, 0.109951743655322];
		case 5 % Order 5, nQuad 7
			alpha1 = 0.059715871789770;      beta1 = 0.470142064105115;
			alpha2 = 0.797426985353087;      beta2 = 0.101286507323456;
			lambda = [   1/3,    1/3,    1/3; ...
				alpha1,  beta1,  beta1; ...
				beta1, alpha1,  beta1; ...
				beta1,  beta1, alpha1; ...
				alpha2,  beta2,  beta2; ...
				beta2, alpha2,  beta2; ...
				beta2,  beta2, alpha2];
			weight = [0.225, 0.132394152788506, 0.132394152788506, 0.132394152788506, ...
				0.125939180544827, 0.125939180544827, 0.125939180544827];
		case 6			
			A=[0.249286745171  0.249286745171  0.116786275726
				0.249286745171  0.501426509658  0.116786275726
				0.501426509658  0.249286745171  0.116786275726
				0.063089014492  0.063089014492  0.050844906370
				0.063089014492  0.873821971017  0.050844906370
				0.873821971017  0.063089014492  0.050844906370
				0.310352451034  0.636502499121  0.082851075618
				0.636502499121  0.053145049845  0.082851075618
				0.053145049845  0.310352451034  0.082851075618
				0.636502499121  0.310352451034  0.082851075618
				0.310352451034  0.053145049845  0.082851075618
				0.053145049845  0.636502499121  0.082851075618];
			lambda = [A(:,[1,2]), 1 - sum(A(:,[1,2]),2)];
			weight = A(:,3);
		case 7
			A=[0.333333333333  0.333333333333  -0.149570044468
				0.260345966079  0.260345966079  0.175615257433
				0.260345966079  0.479308067842  0.175615257433
				0.479308067842  0.260345966079  0.175615257433
				0.065130102902  0.065130102902  0.053347235609
				0.065130102902  0.869739794196  0.053347235609
				0.869739794196  0.065130102902  0.053347235609
				0.312865496005  0.638444188570  0.077113760890
				0.638444188570  0.048690315425  0.077113760890
				0.048690315425  0.312865496005  0.077113760890
				0.638444188570  0.312865496005  0.077113760890
				0.312865496005  0.048690315425  0.077113760890
				0.048690315425  0.638444188570  0.077113760890];
			lambda = [A(:,[1,2]), 1 - sum(A(:,[1,2]),2)];
			weight = A(:,3);
		case 8
			A=[0.333333333333  0.333333333333  0.090817990383
				0.485577633384  0.485577633384  0.036725957756
				0.485577633384  0.028844733233  0.036725957756
				0.028844733233  0.485577633384  0.036725957756
				0.109481575485  0.109481575485  0.045321059436
				0.109481575485  0.781036849030  0.045321059436
				0.781036849030  0.109481575485  0.045321059436
				0.307939838764  0.550352941821  0.072757916845
				0.550352941821  0.141707219415  0.072757916845
				0.141707219415  0.307939838764  0.072757916845
				0.550352941821  0.307939838764  0.072757916845
				0.307939838764  0.141707219415  0.072757916845
				0.141707219415  0.550352941821  0.072757916845
				0.246672560640  0.728323904597  0.028327242531
				0.728323904597  0.025003534763  0.028327242531
				0.025003534763  0.246672560640  0.028327242531
				0.728323904597  0.246672560640  0.028327242531
				0.246672560640  0.025003534763  0.028327242531
				0.025003534763  0.728323904597  0.028327242531
				0.066803251012  0.923655933587  0.009421666964
				0.923655933587  0.009540815400  0.009421666964
				0.009540815400  0.066803251012  0.009421666964
				0.923655933587  0.066803251012  0.009421666964
				0.066803251012  0.009540815400  0.009421666964
				0.009540815400  0.923655933587  0.009421666964];
			lambda = [A(:,[1,2]), 1 - sum(A(:,[1,2]),2)];
			weight = A(:,3);			
		case 9
			A=[0.488217389774  0.488217389774  0.025731066440
				0.488217389774  0.023565220452  0.025731066440
				0.023565220452  0.488217389774  0.025731066440
				0.439724392294  0.439724392294  0.043692544538
				0.439724392294  0.120551215411  0.043692544538
				0.120551215411  0.439724392294  0.043692544538
				0.271210385012  0.271210385012  0.062858224218
				0.271210385012  0.457579229976  0.062858224218
				0.457579229976  0.271210385012  0.062858224218
				0.127576145542  0.127576145542  0.034796112931
				0.127576145542  0.744847708917  0.034796112931
				0.744847708917  0.127576145542  0.034796112931
				0.021317350453  0.021317350453  0.006166261052
				0.021317350453  0.957365299094  0.006166261052
				0.957365299094  0.021317350453  0.006166261052
				0.275713269686  0.608943235780  0.040371557766
				0.608943235780  0.115343494535  0.040371557766
				0.115343494535  0.275713269686  0.040371557766
				0.608943235780  0.275713269686  0.040371557766
				0.275713269686  0.115343494535  0.040371557766
				0.115343494535  0.608943235780  0.040371557766
				0.281325580990  0.695836086788  0.022356773202
				0.695836086788  0.022838332222  0.022356773202
				0.022838332222  0.281325580990  0.022356773202
				0.695836086788  0.281325580990  0.022356773202
				0.281325580990  0.022838332222  0.022356773202
				0.022838332222  0.695836086788  0.022356773202
				0.116251915908  0.858014033544  0.017316231109
				0.858014033544  0.025734050548  0.017316231109
				0.025734050548  0.116251915908  0.017316231109
				0.858014033544  0.116251915908  0.017316231109
				0.116251915908  0.025734050548  0.017316231109
				0.025734050548  0.858014033544  0.017316231109];
			lambda = [A(:,[1,2]), 1 - sum(A(:,[1,2]),2)];
			weight = A(:,3);
		otherwise
			error('Gaussian quadrature in 2D up to order 9 only.');
	end
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 3D
% * Jinyun, Y. Symmetric Gaussian quadrature formulae for tetrahedronal
% regions. Comput. Methods Appl. Mech. Engrg.. 43(3):349--353, 1984.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elseif (dim == 3)
	switch order
		case 4 % Order 4, nQuad 16
			alpha1 = 0.7716429020672371;
			beta1 =  0.7611903264425430e-1;
			w1 = 0.5037379410012282e-1;
			alpha = 0.4042339134672644;
			beta = 0.7183164526766925e-1;
			gamma = 0.11970052777978019;
			w2 = 0.6654206863329239e-1;
			lambda = [alpha1 beta1 beta1 beta1; ....
				beta1 alpha1 beta1 beta1; ...
				beta1 beta1 alpha1 beta1; ...
				beta1 beta1 beta1 alpha1; ...
				alpha alpha beta gamma; ...
				alpha alpha gamma beta; ...
				alpha beta alpha gamma; ...
				alpha beta gamma alpha; ...
				alpha gamma beta alpha; ...
				alpha gamma alpha beta; ...
				beta alpha alpha gamma; ...
				beta alpha gamma alpha; ...
				beta gamma alpha alpha; ...
				gamma alpha alpha beta; ...
				gamma alpha beta alpha; ...
				gamma beta alpha alpha];
			weight = [w1, w1, w1, w1, ...
				w2, w2, w2, w2, w2, w2, ...
				w2, w2, w2, w2, w2, w2];
			%% Order 5, nQuad 17
		case 5
			alpha1 = 0.7316369079576180;
			beta1 =  0.8945436401412733e-1;
			w1 = 0.6703858372604275e-1;
			alpha = 0.4214394310662522;
			beta = 0.2454003792903000e-1;
			gamma = 0.1325810999384657;
			w2 = 0.4528559236327399e-1;
			lambda = [1/4, 1/4, 1/4, 1/4; ...
				alpha1 beta1 beta1 beta1; ....
				beta1 alpha1 beta1 beta1; ...
				beta1 beta1 alpha1 beta1; ...
				beta1 beta1 beta1 alpha1; ...
				alpha alpha beta gamma; ...
				alpha alpha gamma beta; ...
				alpha beta alpha gamma; ...
				alpha beta gamma alpha; ...
				alpha gamma beta alpha; ...
				alpha gamma alpha beta; ...
				beta alpha alpha gamma; ...
				beta alpha gamma alpha; ...
				beta gamma alpha alpha; ...
				gamma alpha alpha beta; ...
				gamma alpha beta alpha; ...
				gamma beta alpha alpha];
			weight = [0.1884185567365411, ...
				w1, w1, w1, w1, ...
				w2, w2, w2, w2, w2, w2, ...
				w2, w2, w2, w2, w2, w2];
		case 6
			w1 = 0.9040129046014750e-1;
			a1 = 0.2500000000000000;
			
			w2 = 0.1911983427899124e-1;
			a2 = 0.8277192480479295;
			b2 = 0.5742691731735683e-1;

			w3 = 0.4361493840666568e-1;
			a3 = 0.5135188412556341e-1;
			b3 = 0.4860510285706072;
			c3 = 0.2312985436519147;

			w4 = 0.2581167596199161e-1;
			a4 = 0.2967538129690260;
			b4 = 0.6081079894015281;
			c4 = 0.4756909881472290e-1;

			lambda = [a1 a1 a1 a1; ... %1
				a2 b2 b2 b2; %4
				b2 a2 b2 b2;
				b2 b2 a2 b2;
				b2 b2 b2 a2;
				b3 a3 c3 c3; %12
				a3 b3 c3 c3;
				a3 c3 b3 c3;
				a3 c3 c3 b3;
				b3 c3 a3 c3;
				c3 b3 a3 c3;
				c3 a3 b3 c3;
				c3 a3 c3 b3;
				b3 c3 c3 a3;
				c3 b3 c3 a3;
				c3 c3 b3 a3;
				c3 c3 a3 b3;
				b4 a4 c4 c4; %12
				a4 b4 c4 c4;
				a4 c4 b4 c4;
				a4 c4 c4 b4;
				b4 c4 a4 c4;
				c4 b4 a4 c4;
				c4 a4 b4 c4;
				c4 a4 c4 b4;
				b4 c4 c4 a4;
				c4 b4 c4 a4;
				c4 c4 b4 a4;
				c4 c4 a4 b4;
				];
			weight = [w1; repmat(w2, [4,1]); repval([w3;w4], [12,1])];
		otherwise
			error('Gaussian quadrature in 3D up to order 6 only.');
	end
else
	error('For dimension > 3 only orders 0,1,2,3 are given');
end
	

%% Verification
% The order of the quadrature rule is verified by the function
% verifyquadpts. See <matlab:ifem('verifyquadpts') verifyquadpts>.
